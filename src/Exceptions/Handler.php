<?php

namespace MittoPlus\BaseComponent\Exceptions;

use Exception;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHander;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Validation\ValidationException;
use MittoPlus\BaseComponent\Traits\TraitResponse;

class Handler extends ExceptionHander
{
    protected $methodGetStatusCode = 'getStatusCode';

    protected $errorServerCode = 500;

    use TraitResponse;

    /**
     * A list of the inputs that are never flashed for validation exceptions
     *
     * @var array
     */
    protected $dontFlash = [];

    protected $dontReport = [];

    public function report(Exception $e)
    {
        return parent::report($e); // TODO: Change the autogenerated stub
    }

    public function render($request, Exception $e)
    {
        if($request->wantsJson())
        {
            return $this->handleApiException($request, $e);
        }

        return parent::render($request, $e);
    }

    public function handleApiException($request, Exception $exception)
    {
        $exception = $this->prepareException($exception);
        if($exception instanceof HttpResponseException){
            $exception = $exception->getResponse();
        }

        if($exception instanceof AuthenticationException) {
            $exception = $this->unauthenticated($request, $exception);
        }

        if($exception instanceof ValidationException) {
            $exception = $this->convertValidationExceptionToResponse($exception, $request);
        }

        return $this->apiResponse($exception);
    }

    public function apiResponse($exception)
    {
        if(method_exists($exception, $this->methodGetStatusCode)) {
            $statusCode = $exception->getStatusCode();
        }
        else {
            $statusCode = $this->errorServerCode;
        }

        $error = [];

        switch ($statusCode) {
            case 401:
                $error['message'] = "Unauthorized.";
                break;

            case 403:
                $error['message'] = "Forbidden.";
                break;

            case 404:
                $error['message'] = "Not found.";
                break;

            case 405:
                $error['message'] = "Method Not Allowed.";
                break;

            case 422:
                $error['message'] = $exception->original['message'];
                $error['errors'] = $exception->original['errors'];
                break;

            default:
                $error['message'] = ($statusCode === $this->errorServerCode) ? "Whoops, look like something went wrong" : $exception->getMessage();
                break;
        }

        $error['status'] = $statusCode;

        return $this->error($error, $statusCode);

    }

}